#!/bin/bash
#
# helm-release Simplified Helm-chart Deployment tool
#
# Copyright 2020 ashafer01
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

version="0.1.2"

help_heading() {
    echo "helm-release $version -- Simplified Helm-chart deployment tool"
    echo 'https://github.com/ashafer01/helm-release'
}

usage() {
    echo 'Usage:'
    echo '   helm-release init     -- Set up a new release of a'
    echo '                            Helm chart (interactive)'
    echo '   helm-release upgrade  -- Pull in latest upstream version of the chart'
    echo '                            and carry out a guided upgrade (interactive)'
    echo '   helm-release refresh  -- Render the release taking in updates to'
    echo '                            values and customizations (unattended)'
    echo '   helm-release apply    -- Use kubectl to deploy the release (unattended)'
    echo
    echo 'Informational:'
    echo '   helm-release help     -- Full help output'
    echo '   helm-release usage    -- Just output this usage table'
    echo '   helm-release version  -- Check deps and print the version'
}

info_fn="release-info"
release_dir=".release"
intermediate_fn="$release_dir/intermediate.yaml"
release_fn="$release_dir/release.yaml"
kustomize_fn="kustomization.yaml"

# set up debugging handle initially redirected to null
exec 3>/dev/null

if [[ -n "$DEBUG" ]]; then
    # redirect debugging handle to stderr so the user can see it
    exec 3>&2
fi

error() {
    echo "$1" >&2
}

check() {
    [[ $1 -ne 0 ]] && error "$2" && exit 1
}

check_release_info() {
    if [[ ! -e "$info_fn" ]]; then
        error "$info_fn file does not exist"
        error 'Use `helm-release init` to set up a new release'
        exit 1
    fi
}

write_release_info_template() {
cat <<EOT > "$info_fn"
# This directory is managed by:
# https://github.com/ashafer01/helm-release/

# Required. Name for this individual release of the chart
# If you use multiple environments for example it may be desirable to
# add the environment name to the release name
RELEASE_NAME=""

# Required. The local canonical name for the helm repository hosting
# this chart. First argument to \`helm repo add\`
REPO_NAME=""

# Required. The base URL for the helm repository hosting this chart
# Second argument to \`helm repo add\`
REPO=""

# Required. The chart name within the above repo
CHART=""

# Required. The namespace to use for K8s resources for this release
NAMESPACE="default"

# Optional. Pin the chart version
# The string "latest" and an empty string "" will both leave
# the version unpinned.
VERSION=""
EOT
return $?
}

pull_chart() {
    helm repo update
    check $? 'helm repo update failed'
    mkdir -p "$release_dir"
    if [[ "$VERSION" == "latest" ]]; then
        VERSION=""
    fi
    if [[ -e "$release_dir/$CHART" ]]; then
        echo 'Chart directory already exists, not pulling chart'
    else
        helm pull "$REPO_NAME/$CHART" \
            --untar \
            --untardir "$release_dir" \
            --version "$VERSION"
        return $?
    fi
}

render_release() {
    compgen -G 'values.y*ml' >/dev/null
    check $? 'No values.yaml file found in current directory'

    # Render the current release of the chart
    echo 'Rendering intermediate ...'
    helm template "$RELEASE_NAME" "./$release_dir/$CHART/" \
        -f values.y*ml \
        --namespace "$NAMESPACE" \
      > "$intermediate_fn"
    check $? 'Failed to render values for release'
    echo 'Successfully rendered intermediate with values'

    compgen -G 'kustomization.y*ml' >/dev/null
    if [[ $? -eq 0 ]]; then
        echo 'Applying kustomization ...'
        kustomize build \
            --reorder "none" \
          > "$release_fn"
        check $? 'Failed to render kustomization'
        echo 'Successfully rendered kustomization'
    else
        echo 'No kustomization found, nothing else to render'
        cp "$intermediate_fn" "$release_fn"
        check $? "Failed to copy $intermediate_fn to final location at $release_fn"
    fi

    echo
    echo "Release has been rendered in $release_fn"
    echo 'Deploy it to the cluster by running:'
    echo
    echo "     kubectl apply -f $release_fn"
    echo 'OR'
    echo '     helm-release apply'
    echo
    echo 'Enjoy!'
}

write_kustomize_template() {
cat <<EOT > "$kustomize_fn"
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
# This is the intermediate file generated during helm-release rendering
- $intermediate_fn

# Add transformers/generators here
# https://github.com/kubernetes-sigs/kustomize/blob/master/docs/fields.md
EOT
return $?
}

check_editor() {
    if [[ -z "$EDITOR" ]]; then
        error "EDITOR environment variable must be set and refer to an executable file"
        exit 1
    fi
    if [[ ! -x "$EDITOR" ]]; then
        error "EDITOR environment variable ($EDITOR) does not exist or is not executable"
        exit 1
    fi
    echo "EDITOR $EDITOR seems valid" >&3
}

check_deps() {
    have_all_deps="yes"
    have_helm="yes"

    echo -n 'Checking jq: ' >&3
    which jq >&3 2>&3
    if [[ $? -ne 0 ]]; then
        error 'Command jq not found on PATH'
        error '   `brew/apt/yum/... install jq` will usually work'
        have_all_deps="no"
    fi

    echo -n 'Checking helm: ' >&3
    which helm >&3 2>&3
    if [[ $? -ne 0 ]]; then
        error 'Command helm not found on PATH'
        error '   `brew install helm` or check:'
        error '   https://github.com/helm/helm#install'
        have_all_deps="no"
        have_helm="no"
    fi

    echo -n 'Checking kustomize: ' >&3
    which kustomize >&3 2>&3
    if [[ $? -ne 0 ]]; then
        error 'Command kustomize not found on PATH'
        error '   `brew install kustomize` or check:'
        error '   https://github.com/kubernetes-sigs/kustomize/blob/master/docs/INSTALL.md'
        have_all_deps="no"
    fi

    echo -n 'Checking kubectl: ' >&3
    which kubectl >&3 2>&3
    if [[ $? -ne 0 ]]; then
        error 'Command kubectl not found on PATH'
        error '   `brew install kubectl` or check:'
        error '   https://kubernetes.io/docs/tasks/tools/install-kubectl/'
        have_all_deps="no"
    fi

    if [[ "$have_helm" == "yes" ]]; then
        helm_version="$(helm version --short -c | sed 's/^Client: //')"
        helm_major_version="${helm_version:0:2}"
        case "$helm_major_version" in
        "v3")
            echo 'Helm 3 detected! (this is a good thing)' >&3
            echo >&3
            ;;
        *)
            error "Helm version $helm_version is unsupported"
            error 'Only Helm 3 is supported at present, however Helm 2'
            error 'compatibility is possible with demand. Open an'
            error 'issue on GitHub if this affects you.'
            exit 1
        esac
    fi

    if [[ "$have_all_deps" == "no" ]]; then
        error 'Cannot continue without above commands available on the PATH'
        exit 1
    fi
}

case "$1" in
"init")
    check_deps
    check_editor

    if [[ -e "$info_fn" ]]; then
        echo "$info_fn file already exists, leaving it alone"
    else
        # Set up initial release-info template file
        write_release_info_template
        check $? "Failed to write $info_fn template"
        echo "Wrote out initial template $info_fn file"
        echo "Opening with $EDITOR"
        "$EDITOR" "$info_fn"
        check $? "$EDITOR exited non-zero"
    fi

    source "$info_fn"

    # Validate required release-info variables are non-empty
    [[ -z "$RELEASE_NAME" ]] \
    || [[ -z "$REPO_NAME" ]] \
    || [[ -z "$REPO" ]] \
    || [[ -z "$CHART" ]] \
    || [[ -z "$NAMESPACE" ]] \
    && error "Missing required value(s) in release-info" \
    && exit 1

    # Ensure helm repo is added
    real_repo_url="$(helm repo list -o json | jq -er '.[] | select(.name == "'"$REPO_NAME"'") | .url')"
    if [[ $? -ne 0 ]]; then
        helm repo add "$REPO_NAME" "$REPO"
        check $? 'Failed to add new Helm repo'
    else
        echo "Using existing $REPO_NAME Helm repo"
        if [[ "$real_repo_url" != "$REPO" ]]; then
            echo "Note: The existing repo URL differs from release-info" >&3
            echo >&3
            echo "        Existing URL: $real_repo_url" >&3
            echo "   release-info REPO: $REPO" >&3
        fi
    fi

    # Cache the chart we're using
    pull_chart
    check $? 'Failed to pull Helm chart'

    # Get and edit the default values.yaml
    compgen -G 'values.y*ml' >/dev/null
    if [[ $? -ne 0 ]]; then
        cp "$release_dir/$CHART/"values.y*ml .
        check $? 'Failed to copy default values from chart'
        echo "Copied default $(echo values.y*ml) from chart"
        echo "Opening with $EDITOR"
        "$EDITOR" values.y*ml
        check $? "$EDITOR exited non-zero"
    else
        echo "A values file already exists in this directory: $(echo values.y*ml)"
    fi

    # Write a kustomize template
    compgen -G 'kustomization.y*ml' >/dev/null
    if [[ $? -ne 0 ]]; then
        write_kustomize_template
        check $? 'Failed to write kustomize template file'
        echo "Wrote $kustomize_fn for optional modification"
        echo -n "Would you like to edit $kustomize_fn now? "
        read prompt
        if [[ "$prompt" =~ ^[yY] ]]; then
            echo "Opening with $EDITOR"
            "$EDITOR" "$kustomize_file"
            check $? "$EDITOR exited non-zero"
        else
            echo "We'll leave the no-op kustomize in place"
        fi
    else
        echo "A kustomization already exists in this directory: $(echo kustomization.y*ml)"
    fi

    render_release
    ;;
"upgrade")
    check_deps
    check_release_info
    source "$info_fn"
    mv "$release_dir" "$release_dir-old"
    check $? 'Failed to stash previous release'
    pull_chart
    if [[ $? -ne 0 ]]; then
        error 'Failed to pull Helm chart upgrade'
        error 'Rolling back local chart'
        mv "$release_dir-old" "$release_dir"
        check $? 'Failed to roll back, bailing.'
        exit 1
    else
        # TODO guided upgrade
        echo
        echo 'WARNING: Guided upgrade feature is not yet implemented'
        echo 'Rendering may fail without manually updating values.yaml'
        echo
        render_release
        rm -rf "$release_dir-old"
    fi
    ;;
"refresh")
    check_deps
    check_release_info
    source "$info_fn"
    render_release
    ;;
"apply")
    check_deps
    kubectl apply -f "$release_fn"
    ;;
"version")
    echo "v$version -- helm-release Development"
    echo >&3
    check_deps
    ;;
"help")
    help_heading
    echo
    usage
    echo
    echo 'Help topics:'
    echo
    echo '* Debugging'
    echo
    echo 'Set the DEBUG variable to get extra debugging output, e.g.:'
    echo
    echo '   DEBUG=yes helm-release version'
    echo
    echo '* Interactive editor'
    echo
    echo 'Note that the `init` subcommand makes frequent use of the'
    echo "standard EDITOR environment variable. If you don't keep this"
    echo 'set in your shell rc file, you can pass it in, e.g.:'
    echo
    echo '   EDITOR=/usr/bin/vim DEBUG=yes helm-release init'
    echo
    echo 'The editor that helm-release opens must be closed after you'
    echo 'are finished editing the file for the init process to'
    echo 'continue.'
    echo
    echo '* Re-init'
    echo
    echo 'The init command is idempotent. It will non-destructively'
    echo 'ensure that all required files are in place, skipping over'
    echo 'any that are already present. Note that init cannot'
    echo 'validate files beyond their presence.'
    echo
    echo '* Dependencies'
    echo
    echo 'helm-release expects all of the following commands to be'
    echo 'available on the PATH:'
    echo '  - helm'
    echo '  - kustomize'
    echo '  - kubectl'
    echo '  - jq'
    echo
    echo 'Homebrew users can install all of these with:'
    echo
    echo '   brew install helm kustomize kubectl jq'
    echo
    echo 'Other platforms will have different setup needs.'
    echo 'helm-release checks for missing dependencies and will'
    echo 'output a link with installation instructions.'
    ;;
"usage")
    usage
    ;;
*)
    help_heading
    echo
    error 'Unknown subcommand, see `helm-release help` for more info'
    exit 1
    ;;
esac
